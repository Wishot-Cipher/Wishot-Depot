{
  "compilerOptions": {
    // ðŸ”¹ ECMAScript version for output (modern JS)
    "target": "ESNext",

    // ðŸ”¹ Ensures proper handling of class field declarations
    "useDefineForClassFields": true,

    // ðŸ”¹ Include DOM and modern JS APIs
    "lib": ["DOM", "DOM.Iterable", "ESNext"],

    // ðŸ”¹ Allow mixing plain JS files (.js/.jsx) with TypeScript files (.ts/.tsx)
    "allowJs": true,

    // ðŸ”¹ Skip type checking of library files (faster builds)
    "skipLibCheck": true,

    // ðŸ”¹ Enables default imports from CommonJS modules
    "esModuleInterop": true,

    // ðŸ”¹ Allows `import React from "react"` and similar without issues
    "allowSyntheticDefaultImports": true,

    // ðŸ”¹ Disables strict mode (use true later when you're comfortable with TS)
    "strict": false,

    // ðŸ”¹ Enforces consistent case in file imports (helps with Windows/macOS differences)
    "forceConsistentCasingInFileNames": true,

    // ðŸ”¹ Module system for bundling (Vite expects ESNext)
    "module": "ESNext",

    // ðŸ”¹ How modules are resolved (Node-style resolution)
    "moduleResolution": "Node",

    // ðŸ”¹ Allow importing JSON files as modules
    "resolveJsonModule": true,

    // ðŸ”¹ Prevents files from interfering with each other
    "isolatedModules": true,

    // ðŸ”¹ Donâ€™t emit compiled JS files (Vite handles that)
    "noEmit": true,

    // ðŸ”¹ Enables React 17+ JSX transform (no need to import React manually)
    "jsx": "react-jsx",

    // ðŸ”¹ Base path for module resolution
    "baseUrl": ".",

    // ðŸ”¹ Create shortcut imports (for example, "@/components/Button")
    "paths": {
      "@/*": ["./src/*"]
    }
  },

  // ðŸ”¹ Include all files inside `src/`
  "include": ["src"]
}
